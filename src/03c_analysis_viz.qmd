
---
title: "R Notebook"
output: html_notebook
editor_options: 
  chunk_output_type: inline
---

# ROLLing
```{r}
library(tidyverse)
library(glue)
library(see)
library(patchwork)
```

While I'm still working on the package, do this (delete l8r and replcae with library(ROLLing))
```{r}
library(devtools)
setwd("~/GitHub/ROLLing")
load_all()
```

```{r}
#Use these once I've got the code in a new repo
#library(here)
#here::i_am("shanti")

setwd("~/GitHub/lhasa-reference-tracking/shanti/")
model = readRDS("wo_analysis/20241111_bestmodel.rds")
df = model$origData

#These are patches on ROLLing errors / annotation errors
#Remove them after I've fixed the correpsonding stuff
#model$origData = df
#model$origData = model$origData %>% mutate(wordWylie = str_replace_all(wordWylie, "  ", " "))
#model$origDataInfo = list(id = "verbID", order = "argOrder", formulaType = "reg", reg = "ridge")
#model$origDataInfo[["featsChosen"]] = c("argTypeNew",
           "noPrevMentions", "noPrevZero", "noNextMentions", "noNextZero",
           "haveBridges", "identifiable", "local", "justFirst", "justLast", 
            "interrog", "animate",
          "self", "addressee", "length", "pronom", "noPrevMentionsFar", "noNextMentionsFar")
#model$origData = model$origData %>% mutate(argTypeNew = case_when(verbID == "31D0DCEFA5BC2" ~ "R", T ~ argTypeNew))
#saveRDS(model, "wo_analysis/20241111_bestmodel.rds")
```

```{r}
featsQuant = c("noPrevMentions", "noPrevZero", "noNextMentions", "noNextZero",
"justFirst", "justLast", "length", "noPrevMentionsFar", "noNextMentionsFar")
smallCaps = c("ᴀ", "ʙ", "ᴄ", "ᴅ", "ᴇ", "ғ", "ɢ", "ʜ", "ɪ", "ᴊ", "ᴋ", "ʟ", "ᴍ", "ɴ", "ᴏ", "ᴘ", "ǫ", "ʀ", "s", "ᴛ", "ᴜ", "ᴠ", "ᴡ", "x", "ʏ", "ᴢ")
names(smallCaps) = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")
toSmallCaps = function(text){
  text_new = text
  for(letter in names(smallCaps)){
    text_new = str_replace_all(text_new, letter, smallCaps[letter])
  }
  names(text_new) = names(text)
  text_new
}
```

```{r}
varnamesMap = c(argTypeNewPRED = "ArgType=PRED", argTypeNewP = "ArgType=P", argTypeNewE =  "ArgType=E", argTypeNewR =  "ArgType=R", identifiable =  "Identif", argTypeNewEXIST = "ArgType=EXIST", haveBridges =  "PrevAssoc", noPrevMentions =  "NoPrevMentions",  interrog = "Interrog", justFirst = "JustFirst", noNextMentions = "NoNextMentions", animate = "Animate", length = "Length", pronom = "Pronom", noPrevMentionsFar = "NoPrevMentionsFar", self = "Self", justLast = "JustLast")
varnamesMap = toSmallCaps(varnamesMap)
getDisplayVarname = function(varnames){
  varnamesMap[varnames]
}
```

```{r}
predictionsDF = predict(model)
```

```{r}
locateID = function(id){
  df_filtered = df %>% filter(verbID == !!id)
  print(glue("Doc: {df_filtered$doc[1]}"))
  print(glue("Unit: {df_filtered$unitSeqFirst[1]}"))
}
```

# Coefficient values

```{r}
library(tidyverse)
library(see)
quantFactor_sd = df %>% select(all_of(featsQuant)) %>% lapply(sd)
coefLollipops(model,
  featsQuant = featsQuant) +
    scale_x_discrete(labels = getDisplayVarname) +
    ylab("Coefficient value") + theme(axis.title.x = element_blank()) +
    scale_color_okabeito()
ggsave("img/coefLollipops.svg", width = 180, height = 100, units = "mm")
```

# Performance


```{r}
noArg_labeller = c("Two arguments", "Three arguments") %>%
  `names<-`(c("1", "2")) %>%
  labeller

noArg_labeller = function(x){
  result =  case_when(x == "2" ~ "Two arguments",
    T ~ "Three arguments")
  result
}

predictionsDF$by_clause %>%
  filter(n_arg < 4) %>%
  mutate(chanceLevel = case_when(n_arg == 2 ~ .5, n_arg == 3 ~ 1/6)) %>%
  ggplot(aes(x = p_clause)) +
  scale_x_continuous(limits = c(0, 1)) +
  geom_density(alpha = .3, col = "orange", fill = "orange") +
  facet_wrap(~ n_arg, labeller = labeller(n_arg = noArg_labeller)) +
  geom_vline(aes(xintercept = chanceLevel), alpha = .5, linetype = 2) +
  xlab("Model-estimated probability of the attested order") +
  theme_minimal()
ggsave("img/performance_density.svg", width = 150, height = 75, units = "mm")
```

# Variable importance


```{r}
featsChosen_grouped = list(c("argTypeNew", "interrog"), c("noPrevMentions", "noPrevZero", "noNextMentions", "noNextZero", "haveBridges", "local", "identifiable", "justFirst", "justLast"), c("self", "addressee", "animate"), c("length", "pronom"))
featsChosen_groupnames = c("role in clause", "discourse status", "semantics", "form")
model_varimp = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50)

plot_varImp = function(model_varimp){
  varimp_long = model_varimp %>%
    as_tibble %>%
    mutate(iter = 1:nrow(.)) %>%
    pivot_longer(featsChosen_groupnames, names_to = "var") %>%
    mutate(var = factor(var, levels = featsChosen_groupnames))

  varimp_long %>%
    ggplot(aes(y = value, x = var)) +
    geom_boxplot() +
    theme_minimal()+
    geom_jitter(alpha = .2)  +
    theme(axis.text.x = element_text(hjust = 1, vjust = 1, angle = 45),
            legend.position = "none") +
    xlab("feature") + ylab("variable importance") +
    scale_x_discrete(labels = str_replace(featsChosen_groupnames, " ", "\n"))
}
combine_varImp_plots = function(plots, limits, titles){
  1:length(plots) %>%
    lapply(function(x){
      graph = plots[[x]] + scale_y_continuous(limits = limits) + ggtitle(titles[[x]])
      if(x > 1) graph = graph + theme(axis.title.y = element_blank())
      graph
    }) %>%
    purrr::reduce(`+`) +
    plot_layout(guides = "collect")
}

plot_varImp(model_varimp)+
    theme(axis.text.x = element_text(hjust = .5, vjust = .5, angle = 0))
ggsave("img/varImp.svg", width = 180, height = 100, units = "mm")
```

```{r}
model_varimp_library = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = (doc == "virginia-library-20766"))
plot_varImp(model_varimp_library) 
ggsave("img/varImp_library.svg", width = 180, height = 100, units = "mm")

model_varimp_script = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = (doc == "dramatroupe-script-8421"))
plot_varImp(model_varimp_script) + scale_y_continuous(c(0, .25))
ggsave("img/varImp_script.svg", width = 180, height = 100, units = "mm")

model_varimp_thieves = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = doc == "island-sangdadorje-8501")
plot_varImp(model_varimp_thieves) + scale_y_continuous(c(0, .25))
ggsave("img/varImp_thieves.svg", width = 180, height = 100, units = "mm")

combine_varImp_plots(list(plot_varImp(model_varimp_library),
  plot_varImp(model_varimp_script),
  plot_varImp(model_varimp_thieves)),
  c(-.05, .3),
  c("The Library", "A New Script", "Thieves' Island"))
```

```{r}
model_varimp_nopred = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = argTypeNew == "PRED", condMode = "none")
plot_varImp(model_varimp_nopred)

combine_varImp_plots(list(plot_varImp(model_varimp),
  plot_varImp(model_varimp_nopred)),
  c(-.05, .3),
  c("With equative clauses", "Without equative clauses"))

ggsave("img/varImp_nopred.svg", width = 180, height = 100, units = "mm")

```

```{r}
model_varimp_library_nopred = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = (doc != "virginia-library-20766" | argTypeNew == "PRED"), condMode = "none")
plot_varImp(model_varimp_library_nopred) 
ggsave("img/varImp_library_nopred.svg", width = 180, height = 100, units = "mm")

model_varimp_script_nopred = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = (doc != "dramatroupe-script-8421" | argTypeNew == "PRED"), condMode = "none")
plot_varImp(model_varimp_script_nopred) + scale_y_continuous(c(0, .25))
ggsave("img/varImp_script_nopred.svg", width = 180, height = 100, units = "mm")

model_varimp_thieves_nopred = varImp(model, featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50, cond = (doc != "island-sangdadorje-8501" | argTypeNew == "PRED"), condMode = "none")
plot_varImp(model_varimp_thieves_nopred) + scale_y_continuous(c(0, .25))
ggsave("img/varImp_thieves_nopred.svg", width = 180, height = 100, units = "mm")

text_varimp_nopred_titles = paste0(c("A New Script", "Thieves' Island", "The Library"),
  "\n(resid. = ",
  c(getFilteredMetric(model, rawResid, cond = (doc != "dramatroupe-script-8421" | argTypeNew == "PRED"), condMode = "none"),
    getFilteredMetric(model, rawResid, cond = (doc != "island-sangdadorje-8501" | argTypeNew == "PRED"), condMode = "none"),
    getFilteredMetric(model, rawResid, cond = (doc != "virginia-library-20766" | argTypeNew == "PRED"), condMode = "none"))  %>% round(2)
  , ")")

text_varimp_nopred_titles = c("A New Script", "Thieves' Island")

combine_varImp_plots(list(plot_varImp(model_varimp_script_nopred),
  plot_varImp(model_varimp_thieves_nopred)),
  c(-.05, .26),
  text_varimp_nopred_titles
  )
ggsave("img/varImp_nopred_script_thieves.svg", width = 180, height = 100, units = "mm")
```


```{r}
data_discoursediff_nopred = filterClauseDiff(model$origData, model$origDataInfo, features = c("haveBridges", "identifiable", "noPrevMentions", "justFirst")) %>% filterClauseNone(model$origDataInfo, argTypeNew == "PRED")
data_discoursediff_nopred %>% pull(verbID) %>% unique %>% length
model_varimp_data_discoursediff_nopred = varImp(model, df = data_discoursediff_nopred, featsChosen = featsChosen_grouped, featGroupNames = featsChosen_groupnames, K = 50)
median(model_varimp_data_discoursediff_nopred[,1]/model_varimp_data_discoursediff_nopred[,2])
plot_varImp(model_varimp_data_discoursediff_nopred)
```



# Analysis of individual examples

Test that getWaterfall works:

```{r}
getWaterfall(model, "30E122DAF5010", varnameMap = varnamesMap, formCol = "wordWylie", deletePolicy = "bothRoughlyZero")
```

## Good examples

Get comparisons. Note that I'm using wmf because svg and png have trouble with zero width rectangles.
```{r}
varnameOrder = c("argTypeNewE", "argTypeNewEXIST", "argTypeNewP", "argTypeNewPRED", "argTypeNewR", "noPrevMentions", "justFirst", "justLast", "noPrevMentionsFar", "noPrevZero", "noNextMentions", "noNextMentionsFar", "noNextZero", "haveBridges", "identifiable", "local", "interrog", "animate", "self", "addressee", "pronom", "length")

getWaterfallComparison = function(id, titles = NULL, currModel = model){
  graphs = getWaterfall(currModel, id, varnameMap = varnamesMap, formCol = "wordWylie", deletePolicy = "bothRoughlyZero", titles = titles, varnameOrder = varnameOrder) %>%
    lapply(function(x) x + theme(axis.title.x = element_blank(),
                                 axis.title.y = element_blank()))
  graphs[[1]] = graphs[[1]] + ylab("log-contribution") +
    theme(axis.title.y = element_text(angle = 90))
  currID = id
  currDF = currModel$origData %>% filter(verbID == currID)
  print(currDF$wordWylie_lower %>% unique %>% paste(collapse = "//"))
  purrr::reduce(graphs, `+`)
}
virginia_ids = model$origData %>% filter(doc == "virginia-library-20766") %>% pull(verbID) %>% unique

getWaterfallComparison(virginia_ids[4], titles = c("nga", "'dir"))
ggsave("img/waterfall_heretostudy.png", width = 180, height = 80, units = "mm")

model$data %>% filter(id == virginia_ids[4])
```

```{r}
getWaterfallComparison(virginia_ids[2])
```


```{r}
pfirst_right_ids = filterClauseFirst(model$origData, model$origDataInfo, argTypeNew %in% c("P", "R", "E")) %>% filterClauseNone(model$origDataInfo, interrog == 1) %>% pull(verbID) %>% unique %>% intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))

getWaterfallComparison(pfirst_right_ids[10], titles = c("ngar", "rngan.pa gcig"))
ggsave("img/waterfall_sent_me_a_present.png", width = 180, height = 80, units = "mm")

#model$data %>% filter(id == pfirst_ids[1])
```


```{r}
pfirst_right_ids = filterClauseFirst(model$origData, model$origDataInfo, argTypeNew == "P") %>% pull(verbID) %>% unique %>% intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))

getWaterfallComparison(pfirst_right_ids[1])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```

## Special argument structures

```{r}
pfirst_right_baselast_ids = filterClauseLast(model$origData, model$origDataInfo, argTypeNew == "Base") %>% pull(verbID) %>% unique %>% intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))
print(glue("Number of base-last clauses that were right: {length(pfirst_right_baselast_ids)}"))
pfirst_wrong_baselast_ids = filterClauseLast(model$origData, model$origDataInfo, argTypeNew == "Base") %>% pull(verbID) %>% unique %>% intersect(predictionsDF$by_clause %>% filter(!correct) %>% pull(id))
print(glue("Number of base-last clauses that were wrong: {length(pfirst_wrong_baselast_ids)}"))

getWaterfallComparison(pfirst_right_baselast_ids[1])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```

```{r}
pfirst_right_nobase_ids = filterClauseNone(model$origData, model$origDataInfo, argTypeNew == "Base") %>% pull(verbID) %>% unique %>% intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))
print(glue("Number of no-base clauses that were right: {length(pfirst_right_nobase_ids)}"))
pfirst_wrong_nobase_ids = filterClauseNone(model$origData, model$origDataInfo, argTypeNew == "Base") %>% pull(verbID) %>% unique %>% intersect(predictionsDF$by_clause %>% filter(!correct) %>% pull(id))
print(glue("Number of no-base clauses that were wrong: {length(pfirst_wrong_nobase_ids)}"))

getWaterfallComparison(pfirst_right_baselast_ids[1])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```


```{r}
pfirst_right_basefirst_ids = filterClauseFirst(model$origData, model$origDataInfo, argTypeNew == "Base") %>%
  pull(verbID) %>% unique %>%
  intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))
print(glue("Number of base-last clauses that were right: {length(pfirst_right_basefirst_ids)}"))
pfirst_wrong_basefirst_ids = filterClauseFirst(model$origData, model$origDataInfo, argTypeNew == "Base") %>%
  pull(verbID) %>% unique %>%
  intersect(predictionsDF$by_clause %>% filter(!correct) %>% pull(id))
print(glue("Number of base-last clauses that were wrong: {length(pfirst_wrong_basefirst_ids)}"))

pfirst_right_basefirst_nopred_ids = filterClauseFirst(model$origData, model$origDataInfo, argTypeNew == "Base") %>%
  filterClauseNone(model$origDataInfo, argType == "PRED") %>%
  pull(verbID) %>% unique %>%
  intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))
print(glue("Number of base-last clauses that were right: {length(pfirst_right_basefirst_nopred_ids)}"))
pfirst_wrong_basefirst_nopred_ids = filterClauseFirst(model$origData, model$origDataInfo, argTypeNew == "Base") %>%
  filterClauseNone(model$origDataInfo, argType == "PRED") %>%
  pull(verbID) %>% unique %>%
  intersect(predictionsDF$by_clause %>% filter(!correct) %>% pull(id))
print(glue("Number of base-last clauses that were wrong: {length(pfirst_wrong_basefirst_nopred_ids)}"))


getWaterfallComparison(pfirst_right_baselast_ids[1])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```



```{r}
pfirst_right_lessmore_ids = filterClauseFirst(model$origData, model$origDataInfo, noPrevMentions == log(1) & argTypeNew == "Base") %>%
   filterClauseLast(model$origDataInfo, noPrevMentions > 1) %>% 
    pull(verbID) %>% unique
    %>% intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))

#16: Good example of why operationalization fails
getWaterfallComparison(pfirst_right_lessmore_ids[20])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```

## Topic stuff

```{r}
pfirst_first_nonbase_nontopic = filterClauseFirst(model$origData, model$origDataInfo, !topic & argTypeNew != "Base") %>% 
    pull(verbID) %>% unique

#16: Good example of why operationalization fails
getWaterfallComparison(pfirst_first_nonbase_nontopic[5])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])

pfirst_first_nonbase_nontopic_somebase = filterClauseFirst(model$origData, model$origDataInfo, !topic & argTypeNew != "Base") %>%
   filterClauseAny(model$origDataInfo, argTypeNew == "Base") %>%
    pull(verbID) %>% unique

```

```{r}
pfirst_first_base_nontopic = filterClauseNone(model$origData, model$origDataInfo, topic == 1) %>%
  filterClauseNone(model$origDataInfo, interrog == 1) %>%
   pull(verbID) %>% unique

#16: Good example of why operationalization fails
getWaterfallComparison(pfirst_first_base_nontopic[37])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```
## justLast

```{r}
pfirst_justLast_ids = filterClauseFirst(model$origData, model$origDataInfo, justLast > 0 & argTypeNew != "Base")  %>% 
    pull(verbID) %>% unique %>%
     intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))
pfirst_noNextMentions_ids = filterClauseLast(model$origData, model$origDataInfo, noNextMentions > 0, interrog == F) %>%
  filterClauseFirst(model$origDataInfo, argTypeNew != "Base")  %>% 
    pull(verbID) %>% unique %>%
     intersect(predictionsDF$by_clause %>% filter(correct) %>% pull(id))

#16: Good example of why operationalization fails
getWaterfallComparison(pfirst_noNextMentions_ids[16])
ggsave("img/waterfall_.svg", width = 180, height = 100, units = "mm")

model$data %>% filter(id == pfirst_ids[1])
```

## Really bad predictions

I'll grab the worst predictions from the model:
```{r}
predictions_wrong = predictionsDF$by_clause %>% filter(!correct)
predictions_pretty_wrong = predictionsDF$by_clause %>% filter(!correct,
    (n_arg == 2 & p_clause >= .25) | (n_arg == 3 & p_clause >= 1/12))
predictions_very_wrong = predictionsDF$by_clause %>% filter(!correct,
    (n_arg == 2 & p_clause < .25) | (n_arg == 3 & p_clause < 1/12) | (n_arg == 3 & p_clause < 1/48))
View(df %>% filter(verbID %in% predictions_very_wrong$id))
```

```{r}
data_very_wrong = df %>% filter(verbID %in% predictions_very_wrong$id)
data_very_wrong_2a = data_very_wrong %>% filter(noArgs == 2)
```


```{r}
getWaterfallComparison(predictions_very_wrong$id[2], currModel = model_genlasso_weighted)
getWaterfallComparison(predictions_very_wrong$id[2]) #'di ni nga tsho 
getWaterfallComparison(predictions_very_wrong$id[4]) #kha shas shig nga ang
ggsave("img/waterfall_deb_kha_shas.png", width = 180, height = 80, units = "mm")
getWaterfallComparison(predictions_very_wrong$id[5]) #kha shas shig nga ang
ggsave("img/waterfall_deb_kha_shas.png", width = 180, height = 80, units = "mm")
getWaterfallComparison(predictions_very_wrong$id[25]) #maybe I should change anno policy for identifiability for this? idk 
getWaterfallComparison(predictions_very_wrong$id[23]) #mo Ta etc
\ggsave("img/waterfall_mo_Ta.png", width = 180, height = 80, units = "mm")
getWaterfallComparison(predictions_very_wrong$id[21], c("rang gi pa.lags dang a.ma.lags", "lho.khar")) # your parents lhoka at; semantic association? but also really, activity type
ggsave("img/waterfall_lhokha.png", width = 180, height = 80, units = "mm")

getWaterfallComparison(predictions_very_wrong$id[19]) # foreign ones give to kids - I think this one is a planning thing?
getWaterfallComparison(predictions_very_wrong$id[18]) # should be processing thing, demonstratives start things all the time
getWaterfallComparison(predictions_very_wrong$id[17]) # not sure, worth looking into more context
getWaterfallComparison(predictions_very_wrong$id[15]) # a more topicky one, odd though because it's for introducing a referent
getWaterfallComparison(predictions_very_wrong$id[14]) # one of those where sap/animacy effect seems likely ...
getWaterfallComparison(predictions_very_wrong$id[11]) # similar to mo Ta one, topicality thing
getWaterfallComparison(predictions_very_wrong$id[10], title = c("nga'i deb gcig", "sbug tu")) # nga'i deb gcig one
ggsave("img/waterfall_deb_sbug.png", width = 180, height = 80, units = "mm")

getWaterfallComparison(predictions_very_wrong$id[9]) #dubious anno for noPrevMentions
getWaterfallComparison(predictions_very_wrong$id[8]) #dubious anno for noPrevMentions
getWaterfallComparison(predictions_very_wrong$id[6]) #concept activation / similar to kha shas
```


```{r}
getWaterfallComparison(predictions_pretty_wrong$id[14], currModel = model)
getWaterfallComparison(predictions_pretty_wrong$id[14], currModel = model_genlasso_weighted)
```

## Animacy
```{r}
firstbaseinanim_thenanim = filterClauseDiff(model$origData, model$origDataInfo, features = "animate") %>%
   filterClauseAny(model$origDataInfo, argTypeNew == "Base" & animate == 0)  %>% 
  filterClauseNone(model$origDataInfo,interrog == 1 | argTypeNew == "PRED" | argTypeNew == "EXIST") %>%
  pull(verbID) %>% unique
getWaterfallComparison(firstbaseinanim_thenanim[1])

firstbaseinanim_thenanim = filterClauseDiff(model$origData, model$origDataInfo, features = "animate") %>%
   filterClauseAny(model$origDataInfo, argTypeNew == "Base" & animate == 0)  %>% 
  filterClauseNone(model$origDataInfo,interrog == 1 | argTypeNew == "PRED" | argTypeNew == "EXIST") %>%
  pull(verbID) %>% unique
getWaterfallComparison(firstbaseinanim_thenanim[1])
```

## Okay predictions

```{r}
predictions_right = predictionsDF$by_clause %>% filter(correct)
predictions_okay = predictionsDF$by_clause %>% filter(correct,
    (n_arg == 2 & p_clause < 3/4) | (n_arg == 3 & p_clause <= 1/4))
predictions_awesome = predictionsDF$by_clause %>% filter(correct,
    (n_arg == 2 & p_clause > 3/4) | (n_arg == 3 & p_clause > 1/4))
```


## Okay predictions

```{r}
predictions_right = predictionsDF$by_clause %>% filter(correct)
predictions_okay = predictionsDF$by_clause %>% filter(correct,
    (n_arg == 2 & p_clause < 3/4) | (n_arg == 3 & p_clause <= 1/4))
predictions_awesome = predictionsDF$by_clause %>% filter(correct,
    (n_arg == 2 & p_clause > 3/4) | (n_arg == 3 & p_clause > 1/4))
```

# Delete later

```{r}
model_new = model
model_new$coef[6:length(model_new$coef)] = model$coef[6:length(model_new$coef)] * 1.35
model_new$coef["animate"] = .65
predictions_new = predict(model_new)
(predictionsDF$by_clause$correct %>% mean) - (predictions_new$by_clause$correct %>% mean)
wronged_predictions = predictionsDF$by_clause %>%
  filter(!predictions_new$by_clause$correct & predictionsDF$by_clause$correct)
righted_predictions = predictionsDF$by_clause %>%
  filter(predictions_new$by_clause$correct & !predictionsDF$by_clause$correct)

getWaterfallComparison(wronged_predictions$id[3]) 
```
