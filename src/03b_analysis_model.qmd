
---
title: "R Notebook"
output: html_notebook
editor_options: 
  chunk_output_type: inline
---


```{r}
library(here)
library(ROLLing)
```

# Prepare data frame

Prepare the initial ingredients: get coxDF, enter all input, and get the MLE:
```{r}
df = readRDS("wo3/20241111_wodata.rds")
featsChosen = c("argTypeNew",
          "noPrevMentions", "noPrevZero", "noNextMentions", "noNextZero",
          "haveBridges", "identifiable", "local", "justFirst", "justLast", 
            "interrog", "animate",
          "self", "addressee", "length", "pronom", "noPrevMentionsFar", "noNextMentionsFar")
featsQuant = c("noPrevMentions", "noPrevZero", "noNextMentions", "noNextZero",
"justFirst", "justLast", "length", "noPrevMentionsFar", "noNextMentionsFar")

id = "verbID"
order = "argOrder"
formulaType = "reg"

#Critical lines
coxDF = getCoxData(df, featsChosen, id, order, formulaType,
  scale = F, scaleCols = featsQuant)
splitVec = splitData(coxDF, k = 5, seed = 2024)
model_mle = suppressWarnings(ROLLing_mle(coxDF))
predictions_mle = predict(model_mle)
origDataInfo = list(featsChosen = featsChosen, formulaType = "reg", order = "argOrder", id = "verbID")
```

Trying to see the impact of weights:
```{r}
df = df %>%
  group_by(verbID) %>%
  mutate(argTypeSeq = paste0(argTypeNew, collapse = "-"),
            n_arg = n()) %>%
  ungroup %>%
  group_by(argTypeSeq) %>%
  mutate(argTypeSeqFreq = sum(1/sqrt(n_arg))) %>%
  mutate(weight = 1 / argTypeSeqFreq) %>%
  ungroup %>%
  mutate(weight = weight / sum(weight) * nrow(.))
model_mle_weighted = suppressWarnings(ROLLing_mle(coxDF, weights = df$weight))

model_genlasso_weighted = ROLLing_genlasso(
  coxDF = coxDF,
  model_mle = model_mle_weighted,
  hyper = c(lambdas_lasso = 1,
            lambdas_ridge = 10^-10,
            lambdas_genlasso = 1),
  weights = df$weight,
  printProcess = T,
  origDataInfo = origDataInfo,
)
coefLollipops(model_genlasso_weighted)
predict(model_genlasso_weighted)$by_clause$correct %>% mean
predictionsDF_weighted = predict(model_genlasso_weighted)$by_clause
```



```{r}
role_bigrams = df %>%
  group_by(verbID) %>%
  reframe(bigramType = getBigrams(argTypeNew)) %>%
  group_by(bigramType) %>%
  count()

getBigrams = function(vec){
  sapply(1:(length(vec) - 1),
    function(x) paste(vec[x], vec[x + 1], sep = "-"))
}
```

```{r}
library(beepr)

genlasso_models = ROLLing_genlasso_path(coxDF,
    model_mle,
    lambdas_lasso = 1,
    lambdas_ridge = 10^-10, 
    lambdas_genlasso = 10 ^ seq(-10, 10, 1),
    hyper_genlasso = list(corThreshold = .3),
    splitVec = splitVec, cv = TRUE,
    elnetMode = "all")
beep()
```

# Pick best model

```{r}
i = genlasso_models$coefs %>%
  mutate(id = 1:nrow(.)) %>%
  filter(.$lambda_lasso == max(.$lambda_lasso)) %>%
  filter(.$lambda_ridge == max(.$lambda_ridge)) %>%
  filter(.$lambda_genlasso == max(.$lambda_genlasso)) %>%
  slice_head() %>% pull(id)
model = genlasso_models$models[[i]]

saveRDS(genlasso_models, "wo_analysis/20241111_allmodels.rds")
saveRDS(model, "wo_analysis/20241111_bestmodel.rds")
```

# What if we ...


## Add topics?

TODO: Run this after fixing NA's in the topic col.
```{r eval = FALSE}
coxDF_withtopic = getCoxData(df, c(featsChosen, "topic"), id, order, formulaType,
  scale = F, scaleCols = featsQuant)
model_mle_withtopic = suppressWarnings(ROLLing_mle(coxDFcoxDF_withtopic))
predictions_mle_withtopic = predict(model_mle_withtopic)
origDataInfo_withtopic = list(featsChosen = c(featsChosen, "topic"), formulaType = "reg", order = "argOrder", id = "verbID")
```


## Add interaction?

TODO: Run this after fixing NA's in the topic col.
```{r eval = FALSE}
df = df %>% mutate(self_noPrevMentions = self * noPrevMentions,
                   addressee_noPrevMentions = addressee * noPrevMentions)
coxDF_sapPrevInteract = getCoxData(df, c(featsChosen, "self_noPrevMentions", "addressee_noPrevMentions"), id, order, formulaType,
  scale = F, scaleCols = featsQuant)
model_mle_sapPrevInteract = suppressWarnings(ROLLing_mle(coxDF_sapPrevInteract))
predictions_mle_sapPrevInteract = predict(model_mle_sapPrevInteract)
origDataInfo_sapPrevInteract = list(featsChosen = c(featsChosen, "self_noPrevMentions", "addressee_noPrevMentions"), formulaType = "reg", order = "argOrder", id = "verbID")

model_genlasso_sapPrevInteract = ROLLing_genlasso(
  coxDF = coxDF_sapPrevInteract,
  model_mle = model_mle_sapPrevInteract,
  hyper = c(lambda_lasso = 1,
            lambda_ridge = 1,
            lambda_genlasso = 1),
  printProcess = T,
  origDataInfo = origDataInfo_sapPrevInteract,
)
model_genlasso_sapPrevInteract$origData = df
model_genlasso_sapPrevInteract$data = coxDF_sapPrevInteract
predictions_sapPrevInteract = predict(model_genlasso_sapPrevInteract)
predictions_sapPrevInteract$by_clause$correct %>% mean
```
